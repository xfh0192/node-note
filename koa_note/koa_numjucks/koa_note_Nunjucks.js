// --------------------------- 使用Nunjucks ---------------------------

// Nunjucks 是一个模板引擎
// 模板引擎就是基于模板配合数据构造出字符串输出的一个组件。比如：
// function examResult(data) {
//     return `${data.name}同学一年级期末考试语文${data.chinese}分，数学${data.math}分，位于年级第${data.ranking}名。`
// }

// // 如果我们输入数据：
// examResult({
//     name: '小明',
//     chinese: 78,
//     math: 88,
//     ranking: 999
// });

// 该模板引擎把模板字符串里面对应的变量替换以后，就可以得到以下输出：
// 小明同学一年级期末考试语文78分，数学87分，位于年级第999名。

// 模板引擎最常见的输出就是输出网页，也就是HTML文本。当然，也可以输出任意格式的文本，比如Text，XML，Markdown等等。

// 有同学要问了：既然JavaScript的模板字符串可以实现模板功能，那为什么我们还需要另外的模板引擎？
// 因为JavaScript的模板字符串必须写在JavaScript代码中，要想写出新浪首页这样复杂的页面，是非常困难的。
// 输出HTML有几个特别重要的问题需要考虑：

// 1.转义
// 对特殊字符要转义，避免受到XSS攻击。
// 比如，如果变量name的值不是小明，而是小明<script>...</script>，模板引擎输出的HTML到了浏览器，就会自动执行恶意JavaScript代码。

// 2.格式化
// 对不同类型的变量要格式化，比如，货币需要变成12,345.00这样的格式，日期需要变成2016-01-01这样的格式。

// 3.简单逻辑
// 模板还需要能执行一些简单逻辑，比如，要按条件输出内容，需要if实现如下输出：
// {{ name }}同学，
// {% if score >= 90 %}
//     成绩优秀，应该奖励
// {% elif score >=60 %}
//     成绩良好，继续努力
// {% else %}
//     不及格，建议回家打屁股
// {% endif %}

// 所以，我们需要一个功能强大的模板引擎，来完成页面输出的功能。

// ---------- Numjucks ---------
// 因此，选择 Numjucks 作为模板引擎。Nunjucks是Mozilla开发的一个纯JavaScript编写的模板引擎

// 从上面的例子我们可以看到，虽然模板引擎内部可能非常复杂，但是使用一个模板引擎是非常简单的，因为本质上我们只需要构造这样一个函数：
// function render(view, model) {
//     // TODO:...
// }
// 其中，view是模板的名称（又称为视图），因为可能存在多个模板，需要选择其中一个。
// model就是数据，在JavaScript中，它就是一个简单的Object。
// render函数返回一个字符串，就是模板的输出。

// 下面我们来使用Nunjucks这个模板引擎来编写几个HTML模板，并且用实际数据来渲染模板并获得最终的HTML输出。
// 我们创建一个use-nunjucks的VS Code工程结构如下：

// use-nunjucks/
// |
// +- .vscode/
// |  |
// |  +- launch.json <-- VSCode 配置文件
// |
// +- views/
// |  |
// |  +- hello.html <-- HTML模板文件
// |
// +- app.js <-- 入口js
// |
// +- package.json <-- 项目描述文件
// |
// +- node_modules/ <-- npm安装的所有依赖包

// 依赖： "nunjucks": "2.4.2"